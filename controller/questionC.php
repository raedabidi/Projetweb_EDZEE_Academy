<?php

require '../config.php';
include '../model/question.php';

class questionC
{

    public function listquestion()
    {
        $sql = "SELECT * FROM question";
        $db = config::getConnexion();
        try {
            $liste = $db->query($sql);
            return $liste;
        } catch (Exception $e) {
            die('Error:' . $e->getMessage());
        }
    }

    function deletequestion($ide)
    {
        $sql = "DELETE FROM question WHERE id = :id";
        $db = config::getConnexion();
        $req = $db->prepare($sql);
        $req->bindValue(':id', $ide);

        try {
            $req->execute();
        } catch (Exception $e) {
            die('Error:' . $e->getMessage());
        }
    }


    function addquestion($question)
    {
        $sql = "INSERT INTO question 
        VALUES (NULL, :ques, :prof,:nbrrep,:datecre,:id_test)";
        $db = config::getConnexion();
        try {
            $query = $db->prepare($sql);
            $query->execute([
                'question' => $question->getques(),
                'prof' => $question->getprof(),
                'nbrrep' => $question->getnbrrep(),
                'datecre' => $question->getdatecre(),
                'id_test' => $question->getid_test(),
            ]);
        } catch (Exception $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }


    function showquestion($id)
    {
        $sql = "SELECT * from question where id = $id";
        $db = config::getConnexion();
        try {
            $query = $db->prepare($sql);
            $query->execute();
            $question = $query->fetch();
            return $question;
        } catch (Exception $e) {
            die('Error: ' . $e->getMessage());
        }
    }

    function upnbrrepquestion($question, $id)
    {
        try {
            $db = config::getConnexion();
            $query = $db->prepare(
                'UPnbrrep question SET 
                    question = :question, 
                    prof = :prof, 
                    nbrrep = :nbrrep, 
                    datecre = :datecre
                    id_test = :id_test
                WHERE id= :id'
            );

            $query->execute([
                'id' => $id,
                'prof' => $question->getprof(),
                'question' => $question->getques(),
                'nbrrep' => $question->getnbrrep(),
                'datecre' => $question->getdatecre(),
                'id_test' => $question->getid_test(),
            ]);

            echo $query->rowCount() . " records UPnbrrepD successfully <br>";
        } catch (PDOException $e) {
            $e->getMessage();
        }
    }
    public function generatePDF()
    {
        // Créer une nouvelle instance de la classe TCPDF
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // Paramètres du document PDF
        $pdf->SetCreator(PDF_CREATOR);
        $pdf->SetAuthor('Your Name');
        $pdf->SetTitle('Questions Report');
        $pdf->SetSubject('Questions List');
        $pdf->SetKeywords('TCPDF, PDF, questions');

        // En-tête et pied de page
        $pdf->setHeaderData('', PDF_HEADER_LOGO_WIDTH, 'Questions Report', 'Generated by TCPDF', array(0, 64, 255), array(0, 64, 128));
        $pdf->setFooterData(array(0, 64, 0), array(0, 64, 128));

        // Paramètres de la police
        $pdf->SetFont('helvetica', '', 12);

        // Ajouter une page
        $pdf->AddPage();

        // Récupérer les données de la table question
        $questions = $this->listquestion();

        // Ajouter les données dans le PDF
        foreach ($questions as $question) {
            $pdf->Cell(0, 10, 'Question: ' . $question['ques'], 0, true);
            $pdf->Cell(0, 10, 'Professor: ' . $question['prof'], 0, true);
            $pdf->Cell(0, 10, 'Number of Replies: ' . $question['nbrrep'], 0, true);
            $pdf->Cell(0, 10, 'Creation Date: ' . $question['datecre'], 0, true);
            $pdf->Cell(0, 10, 'Test ID: ' . $question['id_test'], 0, true);
            $pdf->Ln();
        }

        // Nom du fichier PDF de sortie
        $filename = 'questions_report.pdf';

        // Générer le PDF et le sauvegarder sur le serveur
        $pdf->Output($filename, 'F');

        // Retourner le nom du fichier PDF généré
        return $filename;
    }
}

